function myFunct(parameter1, parameter2) {
  console.log(parameter1 * parameter2);
}

myFunct(3, 89);

//

var trueStory = "Smile, beautiful! ";
trueStory += "That's such a lovely day!";
TrueStory.length;

//

var trueStory = "Smile, beautiful! ";
trueStory += "That's such a lovely day!";
trueStory[0];

//

console.log("My donut tastes like cigarettes.");

//

function someOtherF(a, b) {
  return(a + b) - 7;
}

someOtherF(45, 9);

//

function jLo(condition) {
  if (condition) {
    return "Taco taco";
  }
  return "Burrito burrito";
}

jLo(true);

// switch statement (selecting from many options)

function mySwitchFun(num) {
  var result;
  switch(num) {
    case 1:
    result = "pizza";
    break;
    case 2:
    result = "tomatoes";
    break;
    case 3:
    result = "cake";
    break;
  }
  return result;
}

mySwitchFun(3);

function otherF(val) {
  var answer;
  switch(val) {
    case "do":
    answer =  "don't";
    break;
    case "jump":
    answer = "fly";
    break;
    case "look":
    answer = "sniff";
    break;
    default:
    answer = "WTF";
  }
  return answer;
}

otherF("jump");

// Counting cards

var count = 0;

function cc(card) {
  switch(card) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    count += 1;
    break;
    case 10:
    case "J":
    case "Q":
    case "K":
    case "A":
    count -= 1;
    break;
  }

  if (count > 0) {
    return count + " Bet";
  }

  else {
    return count + " Hold";
  }
}

cc(4); cc("J"); cc("A"); cc(6);


// lookup

function whatsInIt(val) {
  var result;
  var here = {
    "cow": "mu mu",
    "cat": "miau miau",
    "lover": "muah muah",
    "bunny": "khrum khrum"
  };
  result = here[val];
  return result;
};

whatsInIt("cat");

// Testing onject for properties

var me = {
  "looks": "good",
  "smells": "nice",
  "tastes": "sweet"
}

function testMe(props) {

  if(me.hasOwnProperty(props)) {
    return me[props];
  }

  return "Are you kidding?";

}

testMe("looks");

// nesting loops

function myLoop(arr) {
  var result = 2;
  for (var i = 0; i < arr.length; i++) {
    for (var j = 0; j < arr[i].length; j++) {
      result *= arr[i][j];
    }
  }
  return result;
}

myLoop([[2, 3],[8, 6],[4]]);

// while loops

var myArray = [];
var i = 0;
while(i < 5) {
  myArray.push(i);
  i++;
}
console.log(myArray);

// Profile lookup I figued out all by myself :)

var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["Javascript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(firstName, prop){
var result = "";
    if(contacts[0].hasOwnProperty(prop)) {
    if(firstName === contacts[0].firstName) {
      result = contacts[0][prop];
    }
    else if(firstName === contacts[1].firstName) {
      result = contacts[1][prop];
    }
    else if(firstName === contacts[2].firstName) {
      result = contacts[2][prop];
    }
    else if(firstName === contacts[3].firstName) {
      result = contacts[3][prop];
    }
    else {
      result = "No such contact";
    }
   }
  else {
    result = "No such property";
  }
  return result;
}

lookUpProfile("Kristian", "lastName");

// creating private properties within object functions

var House = function() {
  var residents;
  this.declareResidents = function(howMany) {
    residents = howMany;
  };
  this.getResidents = function() {
    return residents;
  };
};

var myHouse = new House();
myHouse.declareResidents(100);
myHouse.getResidents();

// map functions

var oldVar = [1, 2, 3, 5];
var newVar = oldVar.map(function(val) {
return val * 2;
});
console.log(newVar);

// factorialize

function factorialize(num) {
  var newArr = [];
  for (var x=1; x<=num; x++) {
    newArr.push(x);
  }
  var result = newArr.reduce(function(previousVal, currentVal) {
    return previousVal*currentVal;
  }, 1);
  return result;
}

factorialize(2);

// palindrome

function palindrome(str) {
  var lc = str.toLowerCase();
  var rem = lc.replace(/\W|_/g, "");
  var newArray = rem.split("");
  var rev = newArray.reverse();
  var join = rev.join("");
  if (rem === join) {
    return true;
  }
  return false;
}

palindrome("E_ye");

// longest world

function wordLength(str) {
  var spl = str.split(" ");
  var arr = [];
  for (var i = 0; i < spl.length; i++) {
    var length = spl[i].length;
    arr.push(length);
  }
  arr.sort(function(a, b) {
    return a - b;
  })
  return arr[arr.length - 1];
}

wordLength("Go home hippies go!");

// 
